{"ast":null,"code":"var queryString = require(\"query-string\");\n\nrequest = require(\"./request\"), helpers = require(\"./helpers\");\nmodule.exports = {\n  getStreams: function getStreams(data) {\n    return new Promise(function (resolve, reject) {\n      if (data && data.community_id && data.community_id.length > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified too many community IDs. The maximum is 100.\", null));\n      } else if (data && data.first && data.first > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified a first parameter that is too high The maximum is 100.\", null));\n      } else if (data && data.first && data.first < 0) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified a first parameter that is too low. The minimum is 1.\", null));\n      } else if (data && data.game_id && data.game_id.length > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified too many game IDs. The maximum is 100.\", null));\n      } else if (data && data.language && data.language.length > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified too many languages. The maximum is 100.\", null));\n      } else if (data && data.type && data.type !== \"all\" && data.type !== \"live\" && data.type !== \"vodcast\") {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified an invalid type parameter. The options are 'all', 'live' or 'vodcast'.\", null));\n      } else if (data && data.user_id && data.user_id.length > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified too many user IDs. The maximum is 100.\", null));\n      } else if (data && data.user_login && data.user_login.length > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified too many usernames. The maximum is 100.\", null));\n      } else {\n        var queries = \"\";\n\n        if (data) {\n          queries = queryString.stringify({\n            after: data.after,\n            before: data.before,\n            community_id: data.community_id,\n            first: data.first,\n            game_id: data.game_id,\n            language: data.language,\n            type: data.type,\n            user_id: data.user_id,\n            user_login: data.user_login\n          });\n        }\n\n        request.get(\"https://api.twitch.tv/helix/streams?\" + queries, {}).then(function (data) {\n          resolve(helpers.generatePayload(200, \"success\", \"OK\", data));\n        });\n      }\n    });\n  },\n  getStreamsMetadata: function getStreamsMetadata(data) {\n    return new Promise(function (resolve, reject) {\n      if (data && data.community_id && data.community_id.length > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified too many community IDs. The maximum is 100.\", null));\n      } else if (data && data.first && data.first > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified a first parameter that is too high The maximum is 100.\", null));\n      } else if (data && data.first && data.first < 0) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified a first parameter that is too low. The minimum is 1.\", null));\n      } else if (data && data.game_id && data.game_id.length > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified too many game IDs. The maximum is 100.\", null));\n      } else if (data && data.language && data.language.length > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified too many languages. The maximum is 100.\", null));\n      } else if (data && data.type && data.type !== \"all\" && data.type !== \"live\" && data.type !== \"vodcast\") {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified an invalid type parameter. The options are 'all', 'live' or 'vodcast'.\", null));\n      } else if (data && data.user_id && data.user_id.length > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified too many user IDs. The maximum is 100.\", null));\n      } else if (data && data.user_login && data.user_login.length > 100) {\n        resolve(helpers.generatePayload(400, \"bad_request\", \"You have specified too many usernames. The maximum is 100.\", null));\n      } else {\n        var queries = \"\";\n\n        if (data) {\n          queries = queryString.stringify({\n            after: data.after,\n            before: data.before,\n            community_id: data.community_id,\n            first: data.first,\n            game_id: data.game_id,\n            language: data.language,\n            type: data.type,\n            user_id: data.user_id,\n            user_login: data.user_login\n          });\n        }\n\n        request.get(\"https://api.twitch.tv/helix/streams/metadata?\" + queries, {}).then(function (data) {\n          resolve(helpers.generatePayload(200, \"success\", \"OK\", data));\n        });\n      }\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
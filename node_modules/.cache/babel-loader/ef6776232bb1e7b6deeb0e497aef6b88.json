{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDEntity, XMLNode, isObject;\n\n  var _require = require('./Utility');\n\n  isObject = _require.isObject;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType'); // Represents an entity declaration in the DTD\n\n  module.exports = XMLDTDEntity = function () {\n    class XMLDTDEntity extends XMLNode {\n      // Initializes a new instance of `XMLDTDEntity`\n      // `parent` the parent `XMLDocType` element\n      // `pe` whether this is a parameter entity or a general entity\n      //      defaults to `false` (general entity)\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      // `value.nData` notation declaration\n      constructor(parent, pe, name, value) {\n        super(parent);\n\n        if (name == null) {\n          throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\n        }\n\n        if (value == null) {\n          throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\n        }\n\n        this.pe = !!pe;\n        this.name = this.stringify.name(name);\n        this.type = NodeType.EntityDeclaration;\n\n        if (!isObject(value)) {\n          this.value = this.stringify.dtdEntityValue(value);\n          this.internal = true;\n        } else {\n          if (!value.pubID && !value.sysID) {\n            throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\n          }\n\n          if (value.pubID && !value.sysID) {\n            throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\n          }\n\n          this.internal = false;\n\n          if (value.pubID != null) {\n            this.pubID = this.stringify.dtdPubID(value.pubID);\n          }\n\n          if (value.sysID != null) {\n            this.sysID = this.stringify.dtdSysID(value.sysID);\n          }\n\n          if (value.nData != null) {\n            this.nData = this.stringify.dtdNData(value.nData);\n          }\n\n          if (this.pe && this.nData) {\n            throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\n          }\n        }\n      } // Converts the XML fragment to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n\n\n      toString(options) {\n        return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n      }\n\n    }\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {\n      get: function () {\n        return this.pubID;\n      }\n    });\n    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {\n      get: function () {\n        return this.sysID;\n      }\n    });\n    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {\n      get: function () {\n        return this.nData || null;\n      }\n    }); // DOM level 3\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {\n      get: function () {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {\n      get: function () {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {\n      get: function () {\n        return null;\n      }\n    });\n    return XMLDTDEntity;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}
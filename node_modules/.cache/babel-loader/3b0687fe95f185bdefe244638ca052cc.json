{"ast":null,"code":"// Load modules\n// Declare internals\nvar internals = {};\n\nexports.arrayToObject = function (source) {\n  var obj = {};\n\n  for (var i = 0, il = source.length; i < il; ++i) {\n    if (typeof source[i] !== 'undefined') {\n      obj[i] = source[i];\n    }\n  }\n\n  return obj;\n};\n\nexports.clone = function (source) {\n  if (typeof source !== 'object' || source === null) {\n    return source;\n  }\n\n  if (Buffer.isBuffer(source)) {\n    return source.toString();\n  }\n\n  var obj = Array.isArray(source) ? [] : {};\n\n  for (var i in source) {\n    if (source.hasOwnProperty(i)) {\n      obj[i] = exports.clone(source[i]);\n    }\n  }\n\n  return obj;\n};\n\nexports.merge = function (target, source) {\n  if (!source) {\n    return target;\n  }\n\n  var obj = exports.clone(target);\n\n  if (Array.isArray(source)) {\n    for (var i = 0, il = source.length; i < il; ++i) {\n      if (typeof source[i] !== 'undefined') {\n        if (typeof obj[i] === 'object') {\n          obj[i] = exports.merge(obj[i], source[i]);\n        } else {\n          obj[i] = source[i];\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    obj = exports.arrayToObject(obj);\n  }\n\n  var keys = Object.keys(source);\n\n  for (var k = 0, kl = keys.length; k < kl; ++k) {\n    var key = keys[k];\n    var value = source[key];\n\n    if (value && typeof value === 'object') {\n      if (!obj[key]) {\n        obj[key] = exports.clone(value);\n      } else {\n        obj[key] = exports.merge(obj[key], value);\n      }\n    } else {\n      obj[key] = value;\n    }\n  }\n\n  return obj;\n};\n\nexports.decode = function (str) {\n  try {\n    return decodeURIComponent(str.replace(/\\+/g, ' '));\n  } catch (e) {\n    return str;\n  }\n};\n\nexports.compact = function (obj) {\n  if (typeof obj !== 'object') {\n    return obj;\n  }\n\n  var compacted = {};\n\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (Array.isArray(obj[key])) {\n        compacted[key] = [];\n\n        for (var i = 0, l = obj[key].length; i < l; i++) {\n          if (typeof obj[key][i] !== 'undefined') {\n            compacted[key].push(obj[key][i]);\n          }\n        }\n      } else {\n        compacted[key] = exports.compact(obj[key]);\n      }\n    }\n  }\n\n  return compacted;\n};","map":null,"metadata":{},"sourceType":"script"}
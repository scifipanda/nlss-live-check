{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject;\n\n  var _require = require('./Utility');\n\n  isObject = _require.isObject;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n  XMLDTDAttList = require('./XMLDTDAttList');\n  XMLDTDEntity = require('./XMLDTDEntity');\n  XMLDTDElement = require('./XMLDTDElement');\n  XMLDTDNotation = require('./XMLDTDNotation');\n  XMLNamedNodeMap = require('./XMLNamedNodeMap'); // Represents doctype declaration\n\n  module.exports = XMLDocType = function () {\n    class XMLDocType extends XMLNode {\n      // Initializes a new instance of `XMLDocType`\n      // `parent` the document object\n      // `pubID` public identifier of the external subset\n      // `sysID` system identifier of the external subset\n      constructor(parent, pubID, sysID) {\n        var child, i, len, ref;\n        super(parent);\n        this.type = NodeType.DocType; // set DTD name to the name of the root node\n\n        if (parent.children) {\n          ref = parent.children;\n\n          for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n\n            if (child.type === NodeType.Element) {\n              this.name = child.name;\n              break;\n            }\n          }\n        }\n\n        this.documentObject = parent; // arguments may also be passed as an object\n\n        if (isObject(pubID)) {\n          var _pubID = pubID;\n          pubID = _pubID.pubID;\n          sysID = _pubID.sysID;\n        }\n\n        if (sysID == null) {\n          var _ref = [pubID, sysID];\n          sysID = _ref[0];\n          pubID = _ref[1];\n        }\n\n        if (pubID != null) {\n          this.pubID = this.stringify.dtdPubID(pubID);\n        }\n\n        if (sysID != null) {\n          this.sysID = this.stringify.dtdSysID(sysID);\n        }\n      } // Creates an element type declaration\n      // `name` element name\n      // `value` element content (defaults to #PCDATA)\n\n\n      element(name, value) {\n        var child;\n        child = new XMLDTDElement(this, name, value);\n        this.children.push(child);\n        return this;\n      } // Creates an attribute declaration\n      // `elementName` the name of the element containing this attribute\n      // `attributeName` attribute name\n      // `attributeType` type of the attribute (defaults to CDATA)\n      // `defaultValueType` default value type (either #REQUIRED, #IMPLIED, #FIXED or\n      //                    #DEFAULT) (defaults to #IMPLIED)\n      // `defaultValue` default value of the attribute\n      //                (only used for #FIXED or #DEFAULT)\n\n\n      attList(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n        var child;\n        child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n        this.children.push(child);\n        return this;\n      } // Creates a general entity declaration\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      // `value.nData` notation declaration\n\n\n      entity(name, value) {\n        var child;\n        child = new XMLDTDEntity(this, false, name, value);\n        this.children.push(child);\n        return this;\n      } // Creates a parameter entity declaration\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n\n\n      pEntity(name, value) {\n        var child;\n        child = new XMLDTDEntity(this, true, name, value);\n        this.children.push(child);\n        return this;\n      } // Creates a NOTATION declaration\n      // `name` the name of the notation\n      // `value` an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n\n\n      notation(name, value) {\n        var child;\n        child = new XMLDTDNotation(this, name, value);\n        this.children.push(child);\n        return this;\n      } // Converts to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n\n\n      toString(options) {\n        return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n      } // Aliases\n\n\n      ele(name, value) {\n        return this.element(name, value);\n      }\n\n      att(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n        return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      }\n\n      ent(name, value) {\n        return this.entity(name, value);\n      }\n\n      pent(name, value) {\n        return this.pEntity(name, value);\n      }\n\n      not(name, value) {\n        return this.notation(name, value);\n      }\n\n      up() {\n        return this.root() || this.documentObject;\n      }\n\n      isEqualNode(node) {\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n\n        if (node.name !== this.name) {\n          return false;\n        }\n\n        if (node.publicId !== this.publicId) {\n          return false;\n        }\n\n        if (node.systemId !== this.systemId) {\n          return false;\n        }\n\n        return true;\n      }\n\n    }\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\n      get: function () {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n\n          if (child.type === NodeType.EntityDeclaration && !child.pe) {\n            nodes[child.name] = child;\n          }\n        }\n\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\n      get: function () {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n\n          if (child.type === NodeType.NotationDeclaration) {\n            nodes[child.name] = child;\n          }\n        }\n\n        return new XMLNamedNodeMap(nodes);\n      }\n    }); // DOM level 2\n\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\n      get: function () {\n        return this.pubID;\n      }\n    });\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\n      get: function () {\n        return this.sysID;\n      }\n    });\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    return XMLDocType;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}
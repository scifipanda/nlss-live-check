{"ast":null,"code":"// Generated by CoffeeScript 1.6.3\n(function () {\n  var bom,\n      builder,\n      events,\n      isEmpty,\n      sax,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      __bind = function __bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  };\n\n  sax = require('sax');\n  events = require('events');\n  builder = require('xmlbuilder');\n  bom = require('./bom');\n\n  isEmpty = function isEmpty(thing) {\n    return typeof thing === \"object\" && thing != null && Object.keys(thing).length === 0;\n  };\n\n  exports.defaults = {\n    \"0.1\": {\n      explicitCharkey: false,\n      trim: true,\n      normalize: true,\n      normalizeTags: false,\n      attrkey: \"@\",\n      charkey: \"#\",\n      explicitArray: false,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: false,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      childkey: '@@',\n      charsAsChildren: false,\n      async: false,\n      strict: true\n    },\n    \"0.2\": {\n      explicitCharkey: false,\n      trim: false,\n      normalize: false,\n      normalizeTags: false,\n      attrkey: \"$\",\n      charkey: \"_\",\n      explicitArray: true,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: true,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      childkey: '$$',\n      charsAsChildren: false,\n      async: false,\n      strict: true,\n      rootName: 'root',\n      xmldec: {\n        'version': '1.0',\n        'encoding': 'UTF-8',\n        'standalone': true\n      },\n      doctype: null,\n      renderOpts: {\n        'pretty': true,\n        'indent': '  ',\n        'newline': '\\n'\n      }\n    }\n  };\n\n  exports.ValidationError = function (_super) {\n    __extends(ValidationError, _super);\n\n    function ValidationError(message) {\n      this.message = message;\n    }\n\n    return ValidationError;\n  }(Error);\n\n  exports.Builder = function () {\n    function Builder(opts) {\n      var key, value, _ref;\n\n      this.options = {};\n      _ref = exports.defaults[\"0.2\"];\n\n      for (key in _ref) {\n        if (!__hasProp.call(_ref, key)) continue;\n        value = _ref[key];\n        this.options[key] = value;\n      }\n\n      for (key in opts) {\n        if (!__hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n    }\n\n    Builder.prototype.buildObject = function (rootObj) {\n      var attrkey, charkey, render, rootElement, rootName;\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n\n      if (Object.keys(rootObj).length === 1 && this.options.rootName === exports.defaults['0.2'].rootName) {\n        rootName = Object.keys(rootObj)[0];\n        rootObj = rootObj[rootName];\n      } else {\n        rootName = this.options.rootName;\n      }\n\n      render = function render(element, obj) {\n        var attr, child, entry, index, key, value, _ref, _ref1;\n\n        if (typeof obj !== 'object') {\n          element.txt(obj);\n        } else {\n          for (key in obj) {\n            if (!__hasProp.call(obj, key)) continue;\n            child = obj[key];\n\n            if (key === attrkey) {\n              if (typeof child === \"object\") {\n                for (attr in child) {\n                  value = child[attr];\n                  element = element.att(attr, value);\n                }\n              }\n            } else if (key === charkey) {\n              element = element.txt(child);\n            } else if (typeof child === 'object' && (child != null ? child.constructor : void 0) != null && (child != null ? (_ref = child.constructor) != null ? _ref.name : void 0 : void 0) != null && (child != null ? (_ref1 = child.constructor) != null ? _ref1.name : void 0 : void 0) === 'Array') {\n              for (index in child) {\n                if (!__hasProp.call(child, index)) continue;\n                entry = child[index];\n\n                if (typeof entry === 'string') {\n                  element = element.ele(key, entry).up();\n                } else {\n                  element = arguments.callee(element.ele(key), entry).up();\n                }\n              }\n            } else if (typeof child === \"object\") {\n              element = arguments.callee(element.ele(key), child).up();\n            } else {\n              element = element.ele(key, child.toString()).up();\n            }\n          }\n        }\n\n        return element;\n      };\n\n      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype);\n      return render(rootElement, rootObj).end(this.options.renderOpts);\n    };\n\n    return Builder;\n  }();\n\n  exports.Parser = function (_super) {\n    __extends(Parser, _super);\n\n    function Parser(opts) {\n      this.parseString = __bind(this.parseString, this);\n      this.reset = __bind(this.reset, this);\n      this.assignOrPush = __bind(this.assignOrPush, this);\n\n      var key, value, _ref;\n\n      if (!(this instanceof exports.Parser)) {\n        return new exports.Parser(opts);\n      }\n\n      this.options = {};\n      _ref = exports.defaults[\"0.2\"];\n\n      for (key in _ref) {\n        if (!__hasProp.call(_ref, key)) continue;\n        value = _ref[key];\n        this.options[key] = value;\n      }\n\n      for (key in opts) {\n        if (!__hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n\n      if (this.options.xmlns) {\n        this.options.xmlnskey = this.options.attrkey + \"ns\";\n      }\n\n      this.reset();\n    }\n\n    Parser.prototype.assignOrPush = function (obj, key, newValue) {\n      if (!(key in obj)) {\n        if (!this.options.explicitArray) {\n          return obj[key] = newValue;\n        } else {\n          return obj[key] = [newValue];\n        }\n      } else {\n        if (!(obj[key] instanceof Array)) {\n          obj[key] = [obj[key]];\n        }\n\n        return obj[key].push(newValue);\n      }\n    };\n\n    Parser.prototype.reset = function () {\n      var attrkey,\n          charkey,\n          err,\n          ontext,\n          stack,\n          _this = this;\n\n      this.removeAllListeners();\n      this.saxParser = sax.parser(this.options.strict, {\n        trim: false,\n        normalize: false,\n        xmlns: this.options.xmlns\n      });\n      err = false;\n\n      this.saxParser.onerror = function (error) {\n        if (!err) {\n          err = true;\n          return _this.emit(\"error\", error);\n        }\n      };\n\n      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;\n      this.resultObject = null;\n      stack = [];\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n\n      this.saxParser.onopentag = function (node) {\n        var key, newValue, obj, _ref;\n\n        obj = {};\n        obj[charkey] = \"\";\n\n        if (!_this.options.ignoreAttrs) {\n          _ref = node.attributes;\n\n          for (key in _ref) {\n            if (!__hasProp.call(_ref, key)) continue;\n\n            if (!(attrkey in obj) && !_this.options.mergeAttrs) {\n              obj[attrkey] = {};\n            }\n\n            newValue = node.attributes[key];\n\n            if (_this.options.mergeAttrs) {\n              _this.assignOrPush(obj, key, newValue);\n            } else {\n              obj[attrkey][key] = newValue;\n            }\n          }\n        }\n\n        obj[\"#name\"] = _this.options.normalizeTags ? node.name.toLowerCase() : node.name;\n\n        if (_this.options.xmlns) {\n          obj[_this.options.xmlnskey] = {\n            uri: node.uri,\n            local: node.local\n          };\n        }\n\n        return stack.push(obj);\n      };\n\n      this.saxParser.onclosetag = function () {\n        var cdata, emptyStr, node, nodeName, obj, old, s, xpath;\n        obj = stack.pop();\n        nodeName = obj[\"#name\"];\n        delete obj[\"#name\"];\n        cdata = obj.cdata;\n        delete obj.cdata;\n        s = stack[stack.length - 1];\n\n        if (obj[charkey].match(/^\\s*$/) && !cdata) {\n          emptyStr = obj[charkey];\n          delete obj[charkey];\n        } else {\n          if (_this.options.trim) {\n            obj[charkey] = obj[charkey].trim();\n          }\n\n          if (_this.options.normalize) {\n            obj[charkey] = obj[charkey].replace(/\\s{2,}/g, \" \").trim();\n          }\n\n          if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n            obj = obj[charkey];\n          }\n        }\n\n        if (isEmpty(obj)) {\n          obj = _this.options.emptyTag !== void 0 ? _this.options.emptyTag : emptyStr;\n        }\n\n        if (_this.options.validator != null) {\n          xpath = \"/\" + function () {\n            var _i, _len, _results;\n\n            _results = [];\n\n            for (_i = 0, _len = stack.length; _i < _len; _i++) {\n              node = stack[_i];\n\n              _results.push(node[\"#name\"]);\n            }\n\n            return _results;\n          }().concat(nodeName).join(\"/\");\n\n          try {\n            obj = _this.options.validator(xpath, s && s[nodeName], obj);\n          } catch (_error) {\n            err = _error;\n\n            _this.emit(\"error\", err);\n          }\n        }\n\n        if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {\n          node = {};\n\n          if (_this.options.attrkey in obj) {\n            node[_this.options.attrkey] = obj[_this.options.attrkey];\n            delete obj[_this.options.attrkey];\n          }\n\n          if (!_this.options.charsAsChildren && _this.options.charkey in obj) {\n            node[_this.options.charkey] = obj[_this.options.charkey];\n            delete obj[_this.options.charkey];\n          }\n\n          if (Object.getOwnPropertyNames(obj).length > 0) {\n            node[_this.options.childkey] = obj;\n          }\n\n          obj = node;\n        }\n\n        if (stack.length > 0) {\n          return _this.assignOrPush(s, nodeName, obj);\n        } else {\n          if (_this.options.explicitRoot) {\n            old = obj;\n            obj = {};\n            obj[nodeName] = old;\n          }\n\n          _this.resultObject = obj;\n          return _this.emit(\"end\", _this.resultObject);\n        }\n      };\n\n      ontext = function ontext(text) {\n        var s;\n        s = stack[stack.length - 1];\n\n        if (s) {\n          s[charkey] += text;\n          return s;\n        }\n      };\n\n      this.saxParser.ontext = ontext;\n      return this.saxParser.oncdata = function (text) {\n        var s;\n        s = ontext(text);\n\n        if (s) {\n          return s.cdata = true;\n        }\n      };\n    };\n\n    Parser.prototype.parseString = function (str, cb) {\n      if (cb != null && typeof cb === \"function\") {\n        this.on(\"end\", function (result) {\n          this.reset();\n\n          if (this.options.async) {\n            return process.nextTick(function () {\n              return cb(null, result);\n            });\n          } else {\n            return cb(null, result);\n          }\n        });\n        this.on(\"error\", function (err) {\n          this.reset();\n\n          if (this.options.async) {\n            return process.nextTick(function () {\n              return cb(err);\n            });\n          } else {\n            return cb(err);\n          }\n        });\n      }\n\n      if (str.toString().trim() === '') {\n        this.emit(\"end\", null);\n        return true;\n      }\n\n      return this.saxParser.write(bom.stripBOM(str.toString()));\n    };\n\n    return Parser;\n  }(events.EventEmitter);\n\n  exports.parseString = function (str, a, b) {\n    var cb, options, parser;\n\n    if (b != null) {\n      if (typeof b === 'function') {\n        cb = b;\n      }\n\n      if (typeof a === 'object') {\n        options = a;\n      }\n    } else {\n      if (typeof a === 'function') {\n        cb = a;\n      }\n\n      options = {};\n    }\n\n    parser = new exports.Parser(options);\n    return parser.parseString(str, cb);\n  };\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}
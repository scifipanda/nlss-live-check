{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var XMLCharacterData, XMLNode;\n  XMLNode = require('./XMLNode'); // Represents a character data node\n\n  module.exports = XMLCharacterData = function () {\n    class XMLCharacterData extends XMLNode {\n      // Initializes a new instance of `XMLCharacterData`\n      constructor(parent) {\n        super(parent);\n        this.value = '';\n      } // Creates and returns a deep clone of `this`\n\n\n      clone() {\n        return Object.create(this);\n      } // DOM level 1 functions to be implemented later\n\n\n      substringData(offset, count) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      appendData(arg) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      insertData(offset, arg) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      deleteData(offset, count) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      replaceData(offset, count, arg) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      isEqualNode(node) {\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n\n        if (node.data !== this.data) {\n          return false;\n        }\n\n        return true;\n      }\n\n    }\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLCharacterData.prototype, 'data', {\n      get: function () {\n        return this.value;\n      },\n      set: function (value) {\n        return this.value = value || '';\n      }\n    });\n    Object.defineProperty(XMLCharacterData.prototype, 'length', {\n      get: function () {\n        return this.value.length;\n      }\n    }); // DOM level 3\n\n    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {\n      get: function () {\n        return this.value;\n      },\n      set: function (value) {\n        return this.value = value || '';\n      }\n    });\n    return XMLCharacterData;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}
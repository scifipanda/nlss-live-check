{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCharacterData, XMLText;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData'); // Represents a text node\n\n  module.exports = XMLText = function () {\n    class XMLText extends XMLCharacterData {\n      // Initializes a new instance of `XMLText`\n      // `text` element text\n      constructor(parent, text) {\n        super(parent);\n\n        if (text == null) {\n          throw new Error(\"Missing element text. \" + this.debugInfo());\n        }\n\n        this.name = \"#text\";\n        this.type = NodeType.Text;\n        this.value = this.stringify.text(text);\n      } // Creates and returns a deep clone of `this`\n\n\n      clone() {\n        return Object.create(this);\n      } // Converts the XML fragment to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n\n\n      toString(options) {\n        return this.options.writer.text(this, this.options.writer.filterOptions(options));\n      } // DOM level 1 functions to be implemented later\n\n\n      splitText(offset) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      } // DOM level 3 functions to be implemented later\n\n\n      replaceWholeText(content) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n    }\n\n    ; // DOM level 3\n\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function () {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n\n        str += this.data;\n        next = this.nextSibling;\n\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n\n        return str;\n      }\n    });\n    return XMLText;\n  }.call(this);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _regeneratorRuntime from\"F:\\\\webdevjects\\\\nlss-live-check\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"F:\\\\webdevjects\\\\nlss-live-check\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"F:\\\\webdevjects\\\\nlss-live-check\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"F:\\\\webdevjects\\\\nlss-live-check\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"F:\\\\webdevjects\\\\nlss-live-check\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"F:\\\\webdevjects\\\\nlss-live-check\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"F:\\\\webdevjects\\\\nlss-live-check\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"F:\\\\webdevjects\\\\nlss-live-check\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"F:\\\\webdevjects\\\\nlss-live-check\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import'./css/StreamInfo.css';import twitch from'./api/twitch';import twittersvg from\"./images/twitter.svg\";import youtubesvg from\"./images/youtube.svg\";// Global variables\nvar live='Live';var offline='Offline';var status=offline;var streamInfo;var StreamInfo=/*#__PURE__*/function(_React$Component){_inherits(StreamInfo,_React$Component);function StreamInfo(){var _getPrototypeOf2,_this$state;var _this;_classCallCheck(this,StreamInfo);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(StreamInfo)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state=(_this$state={},_defineProperty(_this$state,_this.props.user[0],offline),_defineProperty(_this$state,\"game\",undefined),_defineProperty(_this$state,\"title\",undefined),_this$state);_this.checkLive=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(streamer){var thisState,response,un,game;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Function to check who is live and to set title to live channels title\nthisState=_assertThisInitialized(_this);_context.next=3;return twitch.get('/streams/',{params:{user_login:streamer}});case 3:response=_context.sent;if(!response.data.data[0]){_context.next=13;break;}streamInfo=response.data.data[0];un=streamInfo.user_name.toLowerCase();thisState.setState({title:streamInfo.title});_context.next=10;return twitch.get('/games/',{params:{id:response.data.data[0].game_id}});case 10:game=_context.sent;thisState.setState({game:game.data.data[0].name});thisState.setState(_defineProperty({},un,live));case 13:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.getGame=function(){// Function to get current game being played by live channel\nvar thisState=_assertThisInitialized(_this);if(status===live){return React.createElement(\"div\",{className:\"stream-info\"},thisState.game);}};return _this;}_createClass(StreamInfo,[{key:\"componentDidMount\",value:function componentDidMount(){this.checkLive(this.props.user[0]);}},{key:\"render\",value:function render(){if(!this.props.isHidden||this.state[this.props.user[0]]===live){// Only renders if channel is live or if channel is not marked hidden\nreturn React.createElement(\"div\",{className:'stream-container bold center '+this.state[this.props.user[0]]},React.createElement(\"a\",{href:'https://twitch.tv/'+this.props.user[0]},React.createElement(\"h1\",{className:\"user\"},this.props.user[0].toUpperCase())),React.createElement(\"div\",{className:\"stream-info-container\"},React.createElement(\"a\",{href:'https://twitter.com/'+this.props.user[1]},React.createElement(\"img\",{className:\"icon\",src:twittersvg,alt:\"twitter\"}),\" \"),React.createElement(\"div\",null,this.state[this.props.user[0]]),React.createElement(\"a\",{href:'https://youtube.com/'+this.props.user[2]},React.createElement(\"img\",{className:\"icon\",src:youtubesvg,alt:\"youtube\"}))),React.createElement(\"hr\",null),React.createElement(\"div\",{className:\"stream-title\"},this.state.title),React.createElement(\"div\",{className:\"stream-title\"},this.state.game));}return React.createElement(\"div\",{className:\"hidden\"});// renders invisible div if marked hidden\n}}]);return StreamInfo;}(React.Component);export default StreamInfo;","map":{"version":3,"sources":["F:/webdevjects/nlss-live-check/src/components/StreamInfo.js"],"names":["React","twitch","live","offline","status","streamInfo","StreamInfo","state","props","user","undefined","checkLive","streamer","thisState","get","params","user_login","response","data","un","user_name","toLowerCase","setState","title","id","game_id","game","name","getGame","isHidden","toUpperCase","twittersvg","youtubesvg","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './css/StreamInfo.css';\r\nimport twitch from './api/twitch';\r\nimport twittersvg from './images/twitter.svg';\r\nimport youtubesvg from './images/youtube.svg';\r\n\r\n// Global variables\r\nlet live = 'Live';\r\nlet offline = 'Offline';\r\nlet status = offline;\r\nlet streamInfo;\r\n\r\nclass StreamInfo extends React.Component {\r\n\r\n    state = { [this.props.user[0]]: offline, game: undefined, title: undefined};\r\n\r\n    componentDidMount() {\r\n        this.checkLive(this.props.user[0])\r\n    }\r\n    \r\n    checkLive = async streamer => { // Function to check who is live and to set title to live channels title\r\n        let thisState = this\r\n        \r\n        const response = await twitch.get('/streams/', {\r\n            params: { user_login: streamer }\r\n        })\r\n\r\n        if(response.data.data[0]) {\r\n            streamInfo = response.data.data[0];\r\n            let un = streamInfo.user_name.toLowerCase();\r\n            \r\n            thisState.setState({title: streamInfo.title})\r\n\r\n            const game = await twitch.get('/games/', {\r\n                params: { id: response.data.data[0].game_id}\r\n            })\r\n            \r\n            thisState.setState({game: game.data.data[0].name})\r\n            \r\n            thisState.setState({[un]: live});\r\n        }\r\n    }\r\n \r\n    getGame = () => { // Function to get current game being played by live channel\r\n        let thisState = this\r\n\r\n        if(status === live) {\r\n            return <div className=\"stream-info\">{thisState.game}</div>\r\n        }\r\n    }    \r\n\r\n    render(){\r\n        if(!this.props.isHidden || this.state[this.props.user[0]] === live) { // Only renders if channel is live or if channel is not marked hidden\r\n           return(\r\n            <div className={'stream-container bold center ' + this.state[this.props.user[0]]}>\r\n                <a href={'https://twitch.tv/' + this.props.user[0]}><h1 className='user'>{this.props.user[0].toUpperCase()}</h1></a>\r\n\r\n                <div className=\"stream-info-container\">\r\n                    <a href={'https://twitter.com/' + this.props.user[1]}><img className=\"icon\" src={twittersvg} alt=\"twitter\"/> </a>\r\n                    <div>{this.state[this.props.user[0]]}</div>\r\n                    <a href={'https://youtube.com/' + this.props.user[2]}><img className=\"icon\" src={youtubesvg} alt=\"youtube\" /></a>\r\n                </div>\r\n                \r\n                <hr />\r\n\r\n                <div className=\"stream-title\">{this.state.title}</div>\r\n                <div className=\"stream-title\">{this.state.game}</div>\r\n            </div>\r\n        ) \r\n        }\r\n        return <div className=\"hidden\"></div> // renders invisible div if marked hidden\r\n    }\r\n    \r\n}\r\n\r\nexport default StreamInfo;"]},"metadata":{},"sourceType":"module"}
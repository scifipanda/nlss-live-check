{"ast":null,"code":"// Load modules\nvar Utils = require('./utils'); // Declare internals\n\n\nvar internals = {\n  delimiter: '&',\n  depth: 5,\n  arrayLimit: 20,\n  parametersLimit: 1000\n};\n\ninternals.parseValues = function (str, delimiter) {\n  delimiter = typeof delimiter === 'undefined' ? internals.delimiter : delimiter;\n  var obj = {};\n  var parts = str.split(delimiter, internals.parametersLimit);\n\n  for (var i = 0, il = parts.length; i < il; ++i) {\n    var part = parts[i];\n    var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;\n\n    if (pos === -1) {\n      obj[Utils.decode(part)] = '';\n    } else {\n      var key = Utils.decode(part.slice(0, pos));\n      var val = Utils.decode(part.slice(pos + 1));\n\n      if (!obj[key]) {\n        obj[key] = val;\n      } else {\n        obj[key] = [].concat(obj[key]).concat(val);\n      }\n    }\n  }\n\n  return obj;\n};\n\ninternals.parseObject = function (chain, val) {\n  if (!chain.length) {\n    return val;\n  }\n\n  var root = chain.shift();\n  var obj = {};\n\n  if (root === '[]') {\n    obj = [];\n    obj = obj.concat(internals.parseObject(chain, val));\n  } else {\n    var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;\n    var index = parseInt(cleanRoot, 10);\n\n    if (!isNaN(index) && root !== cleanRoot && index <= internals.arrayLimit) {\n      obj = [];\n      obj[index] = internals.parseObject(chain, val);\n    } else {\n      obj[cleanRoot] = internals.parseObject(chain, val);\n    }\n  }\n\n  return obj;\n};\n\ninternals.parseKeys = function (key, val, depth) {\n  if (!key) {\n    return;\n  } // The regex chunks\n\n\n  var parent = /^([^\\[\\]]*)/;\n  var child = /(\\[[^\\[\\]]*\\])/g; // Get the parent\n\n  var segment = parent.exec(key); // Don't allow them to overwrite object prototype properties\n\n  if (Object.prototype.hasOwnProperty(segment[1])) {\n    return;\n  } // Stash the parent if it exists\n\n\n  var keys = [];\n\n  if (segment[1]) {\n    keys.push(segment[1]);\n  } // Loop through children appending to the array until we hit depth\n\n\n  var i = 0;\n\n  while ((segment = child.exec(key)) !== null && i < depth) {\n    ++i;\n\n    if (!Object.prototype.hasOwnProperty(segment[1].replace(/\\[|\\]/g, ''))) {\n      keys.push(segment[1]);\n    }\n  } // If there's a remainder, just add whatever is left\n\n\n  if (segment) {\n    keys.push('[' + key.slice(segment.index) + ']');\n  }\n\n  return internals.parseObject(keys, val);\n};\n\nmodule.exports = function (str, depth, delimiter) {\n  if (str === '' || str === null || typeof str === 'undefined') {\n    return {};\n  }\n\n  if (typeof depth !== 'number') {\n    delimiter = depth;\n    depth = internals.depth;\n  }\n\n  var tempObj = typeof str === 'string' ? internals.parseValues(str, delimiter) : Utils.clone(str);\n  var obj = {}; // Iterate over the keys and setup the new object\n  //\n\n  for (var key in tempObj) {\n    if (tempObj.hasOwnProperty(key)) {\n      var newObj = internals.parseKeys(key, tempObj[key], depth);\n      obj = Utils.merge(obj, newObj);\n    }\n  }\n\n  return Utils.compact(obj);\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"F:\\\\webdevjects\\\\nlss-live-check\\\\src\\\\components\\\\StreamInfo.js\";\nimport React from 'react';\nimport './css/StreamInfo.css';\nimport twitch from './api/twitch';\nimport twittersvg from \"./images/twitter.svg\";\nimport youtubesvg from \"./images/youtube.svg\"; // Global variables\n\nlet live = 'Live';\nlet offline = 'Offline';\nlet status = offline;\nlet streamInfo;\nlet styling = {};\n\nclass StreamInfo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      [this.props.user[0]]: offline,\n      game: undefined,\n      title: undefined\n    };\n\n    this.checkLive = async streamer => {\n      // Function to check who is live and to set title to live channels title\n      let thisState = this;\n      const response = await twitch.get('/streams/', {\n        params: {\n          user_login: streamer\n        }\n      });\n\n      if (response.data.data[0]) {\n        streamInfo = response.data.data[0];\n        let un = streamInfo.user_name.toLowerCase();\n        thisState.setState({\n          title: streamInfo.title\n        });\n        const game = await twitch.get('/games/', {\n          params: {\n            id: response.data.data[0].game_id\n          }\n        });\n        thisState.setState({\n          game: game.data.data[0].name\n        });\n        thisState.setState({\n          [un]: live\n        });\n      }\n    };\n\n    this.getGame = () => {\n      // Function to get current game being played by live channel\n      let thisState = this;\n\n      if (status === live) {\n        return React.createElement(\"div\", {\n          className: \"stream-info\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, thisState.game);\n      }\n    };\n\n    this.background = () => {\n      if (this.state[this.props.user[0]] === 'live') {\n        styling = {\n          backgroundColor: 'black'\n        };\n      }\n    };\n\n    this.hasYoutube = () => {\n      if (this.props.user[2] !== 'no-youtube') {\n        return React.createElement(\"a\", {\n          href: 'https://youtube.com/' + this.props.user[2],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"icon\",\n          src: youtubesvg,\n          alt: \"youtube\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }), \" \");\n      } else {\n        return React.createElement(\"img\", {\n          className: \"icon hide\",\n          src: youtubesvg,\n          alt: \"youtube\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.checkLive(this.props.user[0]);\n    this.background();\n  }\n\n  render() {\n    if (!this.props.isHidden || this.state[this.props.user[0]] === live) {\n      // Only renders if channel is live or if channel is not marked hidden\n      if (this.props.isDark) {\n        return React.createElement(\"div\", {\n          style: styling,\n          className: 'stream-container bold center darkmode ' + this.state[this.props.user[0]],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: 'https://twitch.tv/' + this.props.user[0],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          className: \"user\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, this.props.user[0].toUpperCase())), React.createElement(\"div\", {\n          className: \"stream-info-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: 'https://twitter.com/' + this.props.user[1],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"icon\",\n          src: twittersvg,\n          alt: \"twitter\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }), \" \"), React.createElement(\"div\", {\n          className: \"center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, this.state[this.props.user[0]]), this.hasYoutube()), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"stream-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, this.state.title), React.createElement(\"div\", {\n          className: \"stream-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, this.state.game));\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }); // renders invisible div if marked hidden\n  }\n\n}\n\nexport default StreamInfo;","map":{"version":3,"sources":["F:/webdevjects/nlss-live-check/src/components/StreamInfo.js"],"names":["React","twitch","live","offline","status","streamInfo","styling","StreamInfo","Component","state","props","user","game","undefined","title","checkLive","streamer","thisState","response","get","params","user_login","data","un","user_name","toLowerCase","setState","id","game_id","name","getGame","background","backgroundColor","hasYoutube","youtubesvg","componentDidMount","render","isHidden","isDark","toUpperCase","twittersvg"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './css/StreamInfo.css';\r\nimport twitch from './api/twitch';\r\nimport twittersvg from './images/twitter.svg';\r\nimport youtubesvg from './images/youtube.svg';\r\n\r\n// Global variables\r\nlet live = 'Live';\r\nlet offline = 'Offline';\r\nlet status = offline;\r\nlet streamInfo;\r\nlet styling = {};\r\n\r\nclass StreamInfo extends React.Component {\r\n\r\n    state = { [this.props.user[0]]: offline, game: undefined, title: undefined};\r\n\r\n    componentDidMount() {\r\n        this.checkLive(this.props.user[0])\r\n        this.background();\r\n    }\r\n    \r\n    checkLive = async streamer => { // Function to check who is live and to set title to live channels title\r\n        let thisState = this\r\n        \r\n        const response = await twitch.get('/streams/', {\r\n            params: { user_login: streamer }\r\n        })\r\n\r\n        if(response.data.data[0]) {\r\n            streamInfo = response.data.data[0];\r\n            let un = streamInfo.user_name.toLowerCase();\r\n            \r\n            thisState.setState({title: streamInfo.title})\r\n\r\n            const game = await twitch.get('/games/', {\r\n                params: { id: response.data.data[0].game_id}\r\n            })\r\n            \r\n            thisState.setState({game: game.data.data[0].name})\r\n            \r\n            thisState.setState({[un]: live});\r\n        }\r\n    }\r\n\r\n    getGame = () => { // Function to get current game being played by live channel\r\n        let thisState = this\r\n\r\n        if(status === live) {\r\n            return <div className=\"stream-info\">{thisState.game}</div>\r\n        }\r\n    }    \r\n\r\n    background = () => {\r\n        if(this.state[this.props.user[0]] === 'live') {\r\n            styling = {\r\n                backgroundColor: 'black'\r\n            }\r\n        }\r\n    }\r\n\r\n    hasYoutube = () => {\r\n        if(this.props.user[2] !== 'no-youtube') {\r\n            return <a href={'https://youtube.com/' + this.props.user[2]}><img className=\"icon\" src={youtubesvg} alt=\"youtube\"/> </a>\r\n        }else {\r\n            return <img className=\"icon hide\" src={youtubesvg} alt=\"youtube\"/> \r\n        }\r\n    }\r\n    render(){\r\n        if(!this.props.isHidden || this.state[this.props.user[0]] === live) { // Only renders if channel is live or if channel is not marked hidden\r\n            if(this.props.isDark) {\r\n                return(\r\n                    <div style={ styling } className={'stream-container bold center darkmode ' + this.state[this.props.user[0]]}>\r\n                        <a href={'https://twitch.tv/' + this.props.user[0]}><h1 className='user'>{this.props.user[0].toUpperCase()}</h1></a>\r\n        \r\n                        <div className=\"stream-info-container\">\r\n                            <a href={'https://twitter.com/' + this.props.user[1]}><img className=\"icon\" src={twittersvg} alt=\"twitter\"/> </a>\r\n                            <div className='center'>{this.state[this.props.user[0]]}</div>\r\n                            {this.hasYoutube()}\r\n                        </div>\r\n                        \r\n                        <hr />\r\n        \r\n                        <div className=\"stream-title\">{this.state.title}</div>\r\n                        <div className=\"stream-title\">{this.state.game}</div>\r\n                    </div>\r\n                ) \r\n           }\r\n        }\r\n        return <div className=\"hidden\"></div> // renders invisible div if marked hidden\r\n    }\r\n    \r\n}\r\n\r\nexport default StreamInfo;"]},"metadata":{},"sourceType":"module"}
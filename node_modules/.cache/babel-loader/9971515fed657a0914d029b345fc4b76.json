{"ast":null,"code":"var _jsxFileName = \"F:\\\\webdevjects\\\\nlss-timer\\\\src\\\\components\\\\StreamInfo.js\";\nimport React from 'react';\nimport './css/StreamInfo.css';\n\nconst api = require('twitch-helix-api');\n\napi.clientID = 'ew5y8dnvd35deca2cqe9ap0ol4hgjy';\nlet live = 'Live';\nlet offline = 'Offline';\nlet status = offline;\n\nclass StreamInfo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      [this.props.user]: offline\n    };\n\n    this.checkLive = async streamer => {\n      let thisState = this;\n      api.streams.getStreams({\n        user_login: streamer\n      }).then(function (data) {\n        if (data.response.data.length > 0) {\n          let un = data.response.data[0].user_name.toLowerCase();\n          thisState.setState({\n            [un]: live\n          });\n          status = live;\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.checkLive(this.props.user);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: 'stream-container ' + status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, this.props.user.toUpperCase()), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, this.state[this.props.user]));\n  }\n\n}\n\nexport default StreamInfo;","map":{"version":3,"sources":["F:/webdevjects/nlss-timer/src/components/StreamInfo.js"],"names":["React","api","require","clientID","live","offline","status","StreamInfo","Component","state","props","user","checkLive","streamer","thisState","streams","getStreams","user_login","then","data","response","length","un","user_name","toLowerCase","setState","componentDidMount","render","toUpperCase"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAnB;;AAEAD,GAAG,CAACE,QAAJ,GAAe,gCAAf;AAEA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,OAAO,GAAG,SAAd;AACA,IAAIC,MAAM,GAAGD,OAAb;;AAEA,MAAME,UAAN,SAAyBP,KAAK,CAACQ,SAA/B,CAAyC;AAAA;AAAA;AAAA,SAErCC,KAFqC,GAE7B;AAAE,OAAC,KAAKC,KAAL,CAAWC,IAAZ,GAAmBN;AAArB,KAF6B;;AAAA,SAQrCO,SARqC,GAQzB,MAAMC,QAAN,IAAkB;AAC1B,UAAIC,SAAS,GAAG,IAAhB;AAEAb,MAAAA,GAAG,CAACc,OAAJ,CAAYC,UAAZ,CAAuB;AAACC,QAAAA,UAAU,EAAEJ;AAAb,OAAvB,EAA+CK,IAA/C,CAAoD,UAASC,IAAT,EAAe;AAC/D,YAAGA,IAAI,CAACC,QAAL,CAAcD,IAAd,CAAmBE,MAAnB,GAA4B,CAA/B,EAAkC;AAC1B,cAAIC,EAAE,GAAGH,IAAI,CAACC,QAAL,CAAcD,IAAd,CAAmB,CAAnB,EAAsBI,SAAtB,CAAgCC,WAAhC,EAAT;AAEAV,UAAAA,SAAS,CAACW,QAAV,CAAmB;AAAC,aAACH,EAAD,GAAMlB;AAAP,WAAnB;AACJE,UAAAA,MAAM,GAAGF,IAAT;AACH;AACJ,OAPD;AAQH,KAnBoC;AAAA;;AAIrCsB,EAAAA,iBAAiB,GAAG;AAChB,SAAKd,SAAL,CAAe,KAAKF,KAAL,CAAWC,IAA1B;AACH;;AAeDgB,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,SAAS,EAAE,sBAAsBrB,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKI,KAAL,CAAWC,IAAX,CAAgBiB,WAAhB,EAAN,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKnB,KAAL,CAAW,KAAKC,KAAL,CAAWC,IAAtB,CAAN,CAFJ,CADJ;AAMH;;AA5BoC;;AAgCzC,eAAeJ,UAAf","sourcesContent":["import React from 'react';\r\nimport './css/StreamInfo.css';\r\n\r\nconst api = require('twitch-helix-api');\r\n\r\napi.clientID = 'ew5y8dnvd35deca2cqe9ap0ol4hgjy'\r\n\r\nlet live = 'Live';\r\nlet offline = 'Offline';\r\nlet status = offline;\r\n\r\nclass StreamInfo extends React.Component {\r\n\r\n    state = { [this.props.user]: offline };\r\n\r\n    componentDidMount() {\r\n        this.checkLive(this.props.user)\r\n    }\r\n    \r\n    checkLive = async streamer => {\r\n        let thisState = this\r\n\r\n        api.streams.getStreams({user_login: streamer}).then(function(data) {\r\n            if(data.response.data.length > 0) {\r\n                    let un = data.response.data[0].user_name.toLowerCase();\r\n\r\n                    thisState.setState({[un]: live});\r\n                status = live;\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className={'stream-container ' + status}>\r\n                <div>{this.props.user.toUpperCase()}</div>\r\n                <div>{this.state[this.props.user]}</div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default StreamInfo;"]},"metadata":{},"sourceType":"module"}
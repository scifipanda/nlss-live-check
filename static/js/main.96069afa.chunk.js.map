{"version":3,"sources":["components/images/youtube.svg","components/images/twitter.svg","components/images/twitterDark.svg","components/images/youtubeDark.svg","components/StreamInfo.js","components/api/twitch.js","components/App.js","index.js"],"names":["module","exports","streamInfo","axios","create","baseURL","headers","live","offline","status","StreamInfo","state","props","user","undefined","checkLive","streamer","a","thisState","twitch","get","params","user_login","response","data","un","user_name","toLowerCase","setState","title","id","game_id","game","name","getGame","className","darkIcon","icon","isDark","youtubesvgDark","youtubesvg","twittersvgDark","twittersvg","hasYoutube","href","src","alt","this","isHidden","toUpperCase","React","Component","streamers","App","hide","dark","darkToggle","ls","set","hideOffline","renderStreamer","bind","key","onClick","map","style","padding","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.96069afa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/youtube.a90a07aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.8df6c139.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitterDark.96a575c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtubeDark.7da90abb.svg\";","import React from 'react';\r\nimport './css/StreamInfo.css';\r\nimport twitch from './api/twitch';\r\nimport twittersvg from './images/twitter.svg';\r\nimport youtubesvg from './images/youtube.svg';\r\nimport twittersvgDark from './images/twitterDark.svg';\r\nimport youtubesvgDark from './images/youtubeDark.svg';\r\n\r\n// Global variables\r\nlet live = 'Live';\r\nlet offline = 'Offline';\r\nlet status = offline;\r\nlet streamInfo;\r\n\r\n// this.props.user[0] = twitch;\r\n// this.props.user[1] = twitter;\r\n// this.props.user[2] = youtube;\r\n\r\nclass StreamInfo extends React.Component {\r\n\r\n    state = { [this.props.user[0]]: offline, game: undefined, title: undefined};\r\n\r\n    componentDidMount() {\r\n        this.checkLive(this.props.user[0])\r\n        this.darkIcon();\r\n    }\r\n    \r\n    checkLive = async streamer => { // Function to check who is live and to set title to live channels title\r\n        let thisState = this\r\n        \r\n        const response = await twitch.get('/streams/', { // Calls twitch api and gets info about streamer\r\n            params: { user_login: streamer }\r\n        })\r\n\r\n        if(response.data.data[0]) { // Checks if streamer is online\r\n            streamInfo = response.data.data[0];\r\n            let un = streamInfo.user_name.toLowerCase();\r\n            \r\n            thisState.setState({title: streamInfo.title})\r\n\r\n            const game = await twitch.get('/games/', {\r\n                params: { id: streamInfo.game_id}\r\n            })\r\n            \r\n            thisState.setState({game: game.data.data[0].name}) // Sets this.state.game to current game being played by streamer\r\n            \r\n            thisState.setState({[un]: live}); // Marks streamer as live\r\n        }\r\n    }\r\n\r\n    getGame = () => { // Function to get current game being played by live channel\r\n        let thisState = this\r\n\r\n        if(status === live) {\r\n            return <div className=\"stream-info\">{thisState.game}</div>\r\n        }\r\n    }    \r\n\r\n    darkIcon = (icon) => { // Changes icon depending on if it's dark or litemode\r\n        if(icon === 'youtubesvg') {\r\n            if(this.props.isDark === ' darkmode') {\r\n                return youtubesvgDark\r\n            }else {\r\n                return youtubesvg\r\n            }\r\n        }\r\n        else {\r\n            if(this.props.isDark === ' darkmode') {\r\n                return twittersvgDark\r\n            }else {\r\n                return twittersvg\r\n            }\r\n        }\r\n    }\r\n\r\n    hasYoutube = () => {\r\n        if(this.props.user[2] !== 'no-youtube') {\r\n            return <a href={'https://youtube.com/' + this.props.user[2]}><img className=\"icon\" src={this.darkIcon('youtubesvg')} alt=\"youtube\"/> </a>\r\n        }else {\r\n            return <img className=\"icon hide\" src={youtubesvg} alt=\"youtube\"/> \r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(!this.props.isHidden || this.state[this.props.user[0]] === live) { // Only renders if channel is live or if channel is not marked hidden\r\n           return(\r\n            <div className={'stream-container shadow bold center ' + this.state[this.props.user[0]] + this.props.isDark}>\r\n                <a href={'https://twitch.tv/' + this.props.user[0]}><h1 className='user'>{this.props.user[0].toUpperCase()}</h1></a>\r\n\r\n                <div className=\"stream-info-container\">\r\n                    <a href={'https://twitter.com/' + this.props.user[1]}><img className=\"icon\" src={this.darkIcon('twittersvg')} alt=\"twitter\"/> </a>\r\n                    <div className='center'>{this.state[this.props.user[0]]}</div>\r\n                    {this.hasYoutube()}\r\n                </div>\r\n                \r\n                <hr className=\"hr\" />\r\n\r\n                <div className=\"stream-title\"><span>{this.state.title}</span></div>\r\n                <div className=\"stream-title\"><span>{this.state.game}</span></div>\r\n            </div>\r\n        ) \r\n        }\r\n        return <div className=\"hidden\"></div> // renders invisible div if marked hidden\r\n    }\r\n    \r\n}\r\n\r\nexport default StreamInfo;","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.twitch.tv/helix/',\r\n    headers: {\r\n        'Client-ID': 'ew5y8dnvd35deca2cqe9ap0ol4hgjy'\r\n    }\r\n});","import React from 'react';\r\nimport './css/main.css'; \r\nimport StreamInfo from './StreamInfo';\r\nimport ls from 'local-storage'\r\n\r\nlet streamers = [ // List of current streamers [twitch channel, twitter account, youtube channel]\r\n    ['northernlion', 'northernlionlp', 'northernlion'],\r\n    ['rockleesmile', 'rockleesmile', 'rockleesmile'],\r\n    ['dumbdog', 'verydumbdog', 'lastgreywolf'],\r\n    ['michaelalfox', 'michaelalfox', 'michaelalfox'],\r\n    ['jsmithoti', 'jsmithoti', 'jsmithoti'],\r\n    ['alpacapatrol', 'alpacapatrol', 'alpacapatrol'],\r\n    ['cobaltstreak', 'cobaltstreak', 'cobaltstreak'],\r\n    ['baertaffy', 'baertaffy', 'baertaffy'],\r\n    ['dangheesling', 'dangheesling', 'dangheesling'],\r\n    ['sinvicta', 'sinvicta316', 'sinvicta'],\r\n    ['lovelymomo', 'katelovelymomo', 'proboxstudio'],\r\n    ['mathasgames', 'mathasgames', 'mathasgames'],\r\n    ['flackblag', 'flackblag7', 'flackblag', ],\r\n    ['hcjustin', 'hcjustinn', 'hcjustin', ],\r\n    ['itshafu', 'itshafu', 'channel/UCddX-H9xUwQH6jOOHuL2vYw'],\r\n    ['unrulybabs', 'unrulybabs', 'no-youtube'],\r\n    ['sinowbeats', 'sinowbeats', 'channel/UCQghs_p93F6BdyRiPJST2rg']\r\n]\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.renderStreamer = this.renderStreamer.bind(this);\r\n    }\r\n    \r\n    state = { hide: false, dark: false }\r\n\r\n    componentDidMount() {  // Sets state to saved preference if it exists\r\n        if(ls.get('dark')) {\r\n            this.setState({ dark: ls.get('dark') })\r\n        }\r\n    }\r\n\r\n    isDark = () => {  // Returns either darkmode or litemode class depending on which is currently selected\r\n        if(this.state.dark) {\r\n            return ' darkmode';\r\n        }else {\r\n            return ' litemode';\r\n        }\r\n    }\r\n\r\n    darkToggle = () => { // Toggles this.state.dark\r\n        this.setState({dark: !this.state.dark});\r\n        ls.set('dark', !this.state.dark );\r\n    }\r\n\r\n    renderStreamer(streamer) {// Dynamically adds any number of streamers to make adding more later easier\r\n        return <StreamInfo isDark={this.isDark()} isHidden={this.state.hide === true} user={streamer} key={streamer} /> \r\n    }\r\n\r\n    hideOffline = () => { // Changes state to mark offline channel as hidden\r\n        this.setState({ hide: !this.state.hide })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className={'main-container ' + this.isDark()}>\r\n                \r\n                <h1 className=\"title center\">NLSS Live Stream Check</h1>\r\n                <div className='button center'>\r\n                    <button className=\"shadow\" onClick={() => this.hideOffline()}>{this.state.hide ? 'Show all streams' : 'Only show live streams'}</button>\r\n                </div>\r\n                <div className=\"button center\">\r\n                   <button className=\"shadow\" onClick={() => this.darkToggle()}>Darkmode toggle</button> \r\n                </div>\r\n                \r\n                <div className=\"people-container\">\r\n                    {streamers.map(this.renderStreamer)}\r\n                </div>\r\n\r\n                <div className='footer center'>\r\n                    <p style={{padding: '0 10px'}}>Contact me on <a href='https://reddit.com/message/compose/?to=scifi_panda'>Reddit</a> or <a href='https://twitter.com/Scifi_Panda'>Twitter</a>.</p>\r\n                    <p style={{padding: '0 10px'}}>Original by <a href='https://twitter.com/eluctweets'>@eluctweets</a></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}